<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vscode开发ts项目 报错：找不到模块或其相应的类型声明</title>
    <link href="/2023/07/24/Vscode%E5%BC%80%E5%8F%91ts%E9%A1%B9%E7%9B%AE-%E6%8A%A5%E9%94%99%EF%BC%9A%E6%89%BE%E4%B8%8D%E5%88%B0%E6%A8%A1%E5%9D%97%E6%88%96%E5%85%B6%E7%9B%B8%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/"/>
    <url>/2023/07/24/Vscode%E5%BC%80%E5%8F%91ts%E9%A1%B9%E7%9B%AE-%E6%8A%A5%E9%94%99%EF%BC%9A%E6%89%BE%E4%B8%8D%E5%88%B0%E6%A8%A1%E5%9D%97%E6%88%96%E5%85%B6%E7%9B%B8%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>报错：找不到模块或其相应的类型声明。（Vue 3 can not find module）</p><p>报错原因：typescript 只能理解 .ts 文件，无法理解 .vue文件</p><p>解决方法：在项目根目录下创建一个后缀为 vue.d.ts 的文件，并写入以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">// 以下两种方案二选一<br>// 方案一 <br>declare module &quot;*.vue&quot; &#123; import Vue from &quot;vue&quot;; export default Vue; &#125; <br>// 方案二 <br>declare module &#x27;*.vue&#x27; &#123; import &#123; defineComponent &#125; from &#x27;vue&#x27;; const Component: ReturnType&lt;typeof defineComponent&gt;; export default Component &#125;<br></code></pre></td></tr></table></figure><p>然后在tsconfig.json中写入一下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.d.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.vue&quot;, &quot;vue.d.ts&quot;],<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue3自动生成调用后端接口js代码</title>
    <link href="/2023/07/23/vue3%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3js%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/07/23/vue3%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3js%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>之前开发Api开放平台的时候鱼皮哥演示了umi-openapi的用法，能自动生成前端调用接口方法，感觉十分十分的方便啊，就想着能不能在vue中使用一下，于是就有了下文。<br>参考文章原地址：<br><a href="https://blog.csdn.net/jsrgckf/article/details/128803251">https://blog.csdn.net/jsrgckf/article/details/128803251</a></p><p>1.在项目目录下新建genSwagger文件夹，然后新建autoGen.js文件</p><p>2.autoGen.js文件内容如下，里面的内容大部分有注释，可以根据自己的项目情况做些修改</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><code class="hljs text">const fs = require(&#x27;fs&#x27;)<br>const path = require(&#x27;path&#x27;)<br>let apiData = &#123;&#125; // 访问swagger.json的数据<br>const http = require(&#x27;http&#x27;)<br> <br>const apiUrl = &#x27;http://localhost:5227/swagger/v1/swagger.json&#x27; // swagger.json的地址,这里是本地的，可以替换成你的地址，有个问题是目前只能是http，https的不行，https会报一个证书错误<br> <br>// 生成api文件的目录<br>function mkdirsSync(dirname) &#123;<br>  if (fs.existsSync(dirname)) &#123;<br>    return true<br>  &#125; else &#123;<br>    if (mkdirsSync(path.dirname(dirname))) &#123;<br>      fs.mkdirSync(dirname)<br>      return true<br>    &#125;<br>  &#125;<br>&#125;<br> <br>function getPath(pathUrl) &#123;<br>  return path.resolve(__dirname, pathUrl)<br>&#125;<br> <br>let dataList = [] // 真正要处理的数据<br> <br>// 将swagger.json中的数据转换成我们需要的数据<br>function getDataList() &#123;<br>  // 遍历apiData.paths<br>  for (const key in apiData.paths) &#123;<br>    let routeData = &#123;&#125;<br>    routeData.api = key<br>    console.log(&#x27;path================ &#x27; + key)<br>    // 遍历apiData.paths[key]<br>    for (let key2 in apiData.paths[key]) &#123;<br>      routeData.method = key2<br>      console.log(&#x27;methods============== &#x27; + key2)<br> <br>      let tag = apiData.paths[key][key2].tags[0]<br>      console.log(&#x27;tag=====&#x27; + tag)<br>      routeData.controller = tag<br>      let params = apiData.paths[key][key2].parameters<br>      if (params) &#123;<br>        routeData.bodyType = &#x27;query&#x27;<br>        routeData.params = apiData.paths[key][key2].parameters<br>      &#125; else &#123;<br>        routeData.params = []<br>        if (key2 === &#x27;post&#x27; &amp;&amp; key2 !== &#x27;get&#x27;) &#123;<br>          routeData.bodyType = &#x27;body&#x27;<br>          let requestBody = apiData.paths[key][key2].requestBody<br>          if (requestBody) &#123;<br>            let content = requestBody.content<br>            if (content) &#123;<br>              let applicationJson = content[&#x27;application/json&#x27;]<br>              if (applicationJson) &#123;<br>                let schema = applicationJson.schema<br>                if (schema) &#123;<br>                  let properties = schema.$ref<br>                  if (properties) &#123;<br>                    let ref = properties.split(&#x27;/&#x27;)<br>                    let refName = ref[ref.length - 1]<br>                    let refData = apiData.components.schemas[refName]<br>                    if (refData) &#123;<br>                      let refProperties = refData.properties<br>                      if (refProperties) &#123;<br>                        for (let key3 in refProperties) &#123;<br>                          let param = &#123;&#125;<br>                          param.name = key3<br>                          param.in = &#x27;body&#x27;<br>                          param.required = true<br>                          param.schema = refProperties[key3]<br>                          routeData.params.push(param)<br>                        &#125;<br>                      &#125;<br>                    &#125;<br>                  &#125;<br>                &#125;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>      //遍历apiData.paths[key][key2]<br>      for (let key3 in apiData.paths[key][key2]) &#123;<br>        // console.log(&#x27;tags===========&#x27; + key3)<br>        if (key2 === &#x27;get&#x27;) &#123;<br>          //routeData.params = apiData.paths[key][key2][key3].parameters<br>        &#125;<br>        //routeData.other = apiData.paths[key][key2][key3]<br>        console.log(apiData.paths[key][key2][key3])<br>      &#125;<br>      console.log(&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;)<br>    &#125;<br>    dataList.push(routeData)<br>  &#125;<br>  console.log(dataList)<br>&#125;<br> <br>// 获取远程swagger.json的数据<br>function httpGetJson(url) &#123;<br>  return new Promise((resolve, reject) =&gt; &#123;<br>    http.get(url, (res) =&gt; &#123;<br>      const &#123; statusCode &#125; = res<br>      const contentType = res.headers[&#x27;content-type&#x27;]<br>      let error<br>      if (statusCode !== 200) &#123;<br>        error = new Error(&#x27;请求失败。\n&#x27; + `状态码: $&#123;statusCode&#125;`)<br>      &#125; else if (!/^application\/json/.test(contentType)) &#123;<br>        error = new Error(&#x27;无效的 content-type.\n&#x27; + `期望 application/json 但获取的是 $&#123;contentType&#125;`)<br>      &#125;<br>      if (error) &#123;<br>        console.log(&#x27;error&#x27;)<br>        // 消耗响应数据以释放内存<br>        console.error(error.message)<br>        res.resume()<br>        return<br>      &#125;<br>      res.setEncoding(&#x27;utf8&#x27;)<br>      let rawData = &#x27;&#x27;<br>      res.on(&#x27;data&#x27;, (chunk) =&gt; &#123;<br>        rawData += chunk<br>      &#125;)<br>      res.on(&#x27;end&#x27;, () =&gt; &#123;<br>        try &#123;<br>          const parsedData = JSON.parse(rawData)<br>          resolve(parsedData)<br>        &#125; catch (e) &#123;<br>          reject(`错误: $&#123;e.message&#125;`)<br>        &#125;<br>      &#125;)<br>    &#125;).on(&#x27;error&#x27;, (e) =&gt; &#123;<br>      reject(`错误: $&#123;e.message&#125;`)<br>    &#125;)<br>  &#125;)<br>&#125;<br> <br>// 生成http请求js文件<br>async function createHttpJsFile() &#123;<br>  console.log(&#x27;start&#x27;)<br>  apiData = await httpGetJson(apiUrl)<br>  getDataList()<br>  console.log(dataList)<br>  if (dataList.length === 0) &#123;<br>    console.log(&#x27;请先点击getUsers按钮&#x27;)<br>    return<br>  &#125;<br>  let httpJs = &#x27;&#x27;<br>  if (dataList.length &gt; 0) &#123;<br>    const dirPath = &#x27;/src/api-service&#x27;<br>    // dataList根据controller去重<br>    const controllerList = []<br>    for (let i = 0; i &lt; dataList.length; i++) &#123;<br>      const routeData = dataList[i]<br>      const controller = routeData.controller<br>      if (controllerList.indexOf(controller) === -1) &#123;<br>        controllerList.push(controller)<br>      &#125;<br>    &#125;<br> <br>    // 生成http请求js文件<br>    for (let i = 0; i &lt; controllerList.length; i++) &#123;<br>      httpJs += `import &#123; httpGet, httpPost &#125; from &#x27;@/utils/http&#x27;\n`<br>      const fileName = controllerList[i]<br>      // 查找dataList里与 controllerList[i]相同的数据 (同一个controller的api放在一起)<br>      const controllerDataList = dataList.filter(item =&gt; item.controller === controllerList[i])<br>      console.log(controllerDataList)<br> <br>      for (const data of controllerDataList) &#123;<br>        const api = data.api // /api/user/getUserList<br>        // 取出api中最后一个斜杠后面的内容<br>        const apiName = api.substring(api.lastIndexOf(&#x27;/&#x27;) + 1)<br>        if (data.method === &#x27;get&#x27;) &#123;<br>          httpJs += `export async function $&#123;apiName&#125;(`<br>          if (data.params &amp;&amp; data.params.length &gt; 0) &#123;<br>            for (let i = 0; i &lt; data.params.length; i++) &#123;<br>              const param = data.params[i]<br>              if (i === 0) &#123;<br>                httpJs += `$&#123;param.name&#125;`<br>              &#125; else &#123;<br>                httpJs += `,$&#123;param.name&#125;`<br>              &#125;<br>            &#125;<br>          &#125;<br>          httpJs += `) &#123;\n`<br>          httpJs += `  return await httpGet(&#x27;$&#123;data.api&#125;&#x27;`<br>          if (data.params &amp;&amp; data.params.length &gt; 0) &#123;<br>            httpJs += `,&#123;\n`<br>            for (let i = 0; i &lt; data.params.length; i++) &#123;<br>              const param = data.params[i]<br>              if (i === 0) &#123;<br>                httpJs += `    $&#123;param.name&#125;:$&#123;param.name&#125;`<br>              &#125; else &#123;<br>                httpJs += `    ,$&#123;param.name&#125;:$&#123;param.name&#125;`<br>              &#125;<br>            &#125;<br>            httpJs += `  &#125;)\n`<br>            httpJs += `&#125;\n`<br>          &#125; else &#123;<br>            httpJs += `)&#125;\n`<br>          &#125;<br>        &#125; else if (data.method === &#x27;post&#x27;) &#123;<br>          // post后面带参数<br>          if (data.params.length &gt; 0 &amp;&amp; data.bodyType === &#x27;query&#x27;) &#123;<br>            httpJs += &#x27;export async function &#x27; + apiName + &#x27;(&#x27;<br>            for (let i = 0; i &lt; data.params.length; i++) &#123;<br>              const param = data.params[i]<br>              if (i === 0) &#123;<br>                httpJs += `$&#123;param.name&#125;`<br>              &#125; else &#123;<br>                httpJs += `,$&#123;param.name&#125;`<br>              &#125;<br>            &#125;<br>            httpJs += `) &#123;\n`<br>            httpJs += `  return await httpPost(&#x27;$&#123;data.api&#125;`<br>            if (data.params &amp;&amp; data.params.length &gt; 0) &#123;<br>              for (let i = 0; i &lt; data.params.length; i++) &#123;<br>                const param = data.params[i]<br>                if (i === 0) &#123;<br>                  httpJs += `?$&#123;param.name&#125;=&#x27;+$&#123;param.name&#125;`<br>                &#125; else &#123;<br>                  httpJs += `+&#x27;&amp;$&#123;param.name&#125;=&#x27;+$&#123;param.name&#125;`<br>                &#125;<br>              &#125;<br>              httpJs += `)&#125;\n`<br>            &#125; else &#123;<br>              httpJs += `)&#125;\n`<br>            &#125;<br>          &#125; else &#123;<br>            httpJs += &#x27;export async function &#x27; + apiName + &#x27;(data) &#123;\n&#x27;<br>            httpJs += &#x27;  return await httpPost(\&#x27;&#x27; + data.api + &#x27;\&#x27;,data)\n&#x27;<br>            httpJs += &#x27;&#125;\n&#x27;<br>          &#125;<br>        &#125;<br>      &#125;<br>      // 生成js文件<br>      mkdirsSync(getPath(`..$&#123;dirPath&#125;/`))<br>      fs.writeFileSync(getPath(`..$&#123;dirPath&#125;/$&#123;fileName&#125;.js`), httpJs)<br>      httpJs = &#x27;&#x27;<br>    &#125;<br>    console.log(httpJs)<br>  &#125;<br>&#125;<br> <br>// 调用一下<br>createHttpJsFile()<br></code></pre></td></tr></table></figure><p>3.在package.json下面的scripts节点下新增内容：”swagger”: “node genSwagger&#x2F;autoGen.js”</p><p>4.在控制台运行 npm run swagger</p><p>5.运行完成后，会在目录下面看到你生成的文件</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nacos 本地单机版部署(Mac M1)</title>
    <link href="/2023/07/23/Nacos-%E6%9C%AC%E5%9C%B0%E5%8D%95%E6%9C%BA%E7%89%88%E9%83%A8%E7%BD%B2-Mac-M1/"/>
    <url>/2023/07/23/Nacos-%E6%9C%AC%E5%9C%B0%E5%8D%95%E6%9C%BA%E7%89%88%E9%83%A8%E7%BD%B2-Mac-M1/</url>
    
    <content type="html"><![CDATA[<p>一.下载Nacos-server包，最新包2.2.3<br>可以在 github 上 Nacos Release 版本列表中下载最新的稳定版本。地址：<br><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a><br>请务必下载最新版，2.1.1以下版本会报错：</p><pre><code class="hljs">    WARN Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;serviceOperatorV2Impl&#39; defined in URL ...</code></pre><p>二.启动之前配置<br>1.解压nacos-server-2.1.0.zip文件</p><p>2.nacos链接数据库<br>创建数据库：CREATE DATABASE nacos<br>执行nacos中数据库文件：mysql-schema.sql</p><p>3.配置application.properties文件<br>打开这些配置，然后正确配置链接数据库</p><pre><code class="hljs">    #*************** Config Module Related Configurations ***************#    ### If use MySQL as datasource:    ### Deprecated configuration property, it is recommended to use `spring.sql.init.platform` replaced.    spring.datasource.platform=mysql    spring.sql.init.platform=mysql    ### Count of DB:    db.num=1    ### Connect URL of DB:    db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC    db.user.0=nacos    db.password.0=nacos</code></pre><p>三.启动nacos服务</p><pre><code class="hljs">    cd nacos/bin    sh startup.sh -m standalone #standalone 代表着单机模式运行，非集群模式</code></pre><p>那如何看 Nacos 日志，从上面可见日志输出在 nacos&#x2F;logs 目录，查看 start.out 日志文件</p><p>访问：<a href="http://localhost:8848/nacos/index.html">http://localhost:8848/nacos/index.html</a>…<br>用户名：nacos<br>密码：nacos</p><p>关闭命令：</p><pre><code class="hljs">    sh shutdown.sh</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac OS M1 环境 项目因netty.dns启动失败</title>
    <link href="/2023/07/21/Mac-OS-M1-%E7%8E%AF%E5%A2%83-%E9%A1%B9%E7%9B%AE%E5%9B%A0netty-dns%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
    <url>/2023/07/21/Mac-OS-M1-%E7%8E%AF%E5%A2%83-%E9%A1%B9%E7%9B%AE%E5%9B%A0netty-dns%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<p>Mac OS M1 环境 项目因netty.dns启动失败</p><pre><code class="hljs">    ERROR 2312 --- [ctor-http-nio-2] i.n.r.d.DnsServerAddressStreamProviders  : Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS.</code></pre><p>解决方案为<br>引入依赖</p><pre><code class="hljs">    &lt;dependency&gt;            &lt;groupId&gt;io.netty&lt;/groupId&gt;            &lt;artifactId&gt;netty-resolver-dns-native-macos&lt;/artifactId&gt;            &lt;version&gt;XXX&lt;/version&gt;            &lt;classifier&gt;osx-x86_64&lt;/classifier&gt;    &lt;/dependency&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/27/hello-world/"/>
    <url>/2023/06/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="生成提交"><a href="#生成提交" class="headerlink" title="生成提交"></a>生成提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate --deploy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
