<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OpenAPI 自动生成接口请求代码</title>
    <link href="/2023/08/04/OpenAPI-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/08/04/OpenAPI-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>OpenAPI Typescript Codegen<br>Node.js库，该库基于OpenAPI规范生成Typescript客户端。<br><a href="https://github.com/ferdikoomen/openapi-typescript-codegen">https://github.com/ferdikoomen/openapi-typescript-codegen</a><br>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install openapi-typescript-codegen --save-dev</span><br></code></pre></td></tr></table></figure><p>例如通过请求工具类 Axios：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">openapi --input (这里是你的后端接口文档地址) --output ./generated --client axios</span><br></code></pre></td></tr></table></figure><p>详细用法建议去查看readme</p><p>如果想要自定义请求参数，怎么办？<br>1）使用代码生成器提供的全局参数修改对象：<br>在&#x2F;generated&#x2F;core&#x2F;OpenAPI.ts 可以修改请求地址</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">export const OpenAPI: OpenAPIConfig = &#123;<br>    BASE: &#x27;http://localhost:8101&#x27;,<br>    VERSION: &#x27;1.0&#x27;,<br>    WITH_CREDENTIALS: false,<br>    CREDENTIALS: &#x27;include&#x27;,<br>    TOKEN: undefined,<br>    USERNAME: undefined,<br>    PASSWORD: undefined,<br>    HEADERS: undefined,<br>    ENCODE_PATH: undefined,<br>&#125;;<br></code></pre></td></tr></table></figure><p>2）直接定义 axios 请求库的全局参数，比如全局请求响应拦截器<br>文档：<a href="https://axios-http.com/docs/interceptors">https://axios-http.com/docs/interceptors</a><br>示例代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs text">// Add a request interceptor<br>import axios from &quot;axios&quot;;<br>axios.interceptors.request.use(<br>  function (config) &#123;<br>    // Do something before request is sent<br>    return config;<br>  &#125;,<br>  function (error) &#123;<br>    // Do something with request error<br>    return Promise.reject(error);<br>  &#125;<br>);<br>// Add a response interceptor<br>axios.interceptors.response.use(<br>  function (response) &#123;<br>    console.log(&quot;响应&quot;, response);<br>    // Any status code that lie within the range of 2xx cause this function to trigger<br>    // Do something with response data<br>    return response;<br>  &#125;,<br>  function (error) &#123;<br>    // Any status codes that falls outside the range of 2xx cause this function to trigger<br>    // Do something with response error<br>    return Promise.reject(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>我放在了&#x2F;src&#x2F;plugins&#x2F;axios中<br>接着在main.ts中引入一下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">import &quot;@/plugins/axios&quot;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vscode开发vue+ts项目 报错：找不到模块或其相应的类型声明</title>
    <link href="/2023/07/24/Vscode%E5%BC%80%E5%8F%91ts%E9%A1%B9%E7%9B%AE-%E6%8A%A5%E9%94%99%EF%BC%9A%E6%89%BE%E4%B8%8D%E5%88%B0%E6%A8%A1%E5%9D%97%E6%88%96%E5%85%B6%E7%9B%B8%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/"/>
    <url>/2023/07/24/Vscode%E5%BC%80%E5%8F%91ts%E9%A1%B9%E7%9B%AE-%E6%8A%A5%E9%94%99%EF%BC%9A%E6%89%BE%E4%B8%8D%E5%88%B0%E6%A8%A1%E5%9D%97%E6%88%96%E5%85%B6%E7%9B%B8%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>报错：找不到模块或其相应的类型声明。（Vue 3 can not find module）</p><p>报错原因：typescript 只能理解 .ts 文件，无法理解 .vue文件</p><p>解决方法：在项目根目录下创建一个后缀为 vue.d.ts 的文件，并写入以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">// 以下两种方案二选一<br>// 方案一 <br>declare module &quot;*.vue&quot; &#123; import Vue from &quot;vue&quot;; export default Vue; &#125; <br>// 方案二 <br>declare module &#x27;*.vue&#x27; &#123; import &#123; defineComponent &#125; from &#x27;vue&#x27;; const Component: ReturnType&lt;typeof defineComponent&gt;; export default Component &#125;<br></code></pre></td></tr></table></figure><p>然后在tsconfig.json中写入一下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.d.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.vue&quot;, &quot;vue.d.ts&quot;],<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos 本地单机版部署(Mac M1)</title>
    <link href="/2023/07/23/Nacos-%E6%9C%AC%E5%9C%B0%E5%8D%95%E6%9C%BA%E7%89%88%E9%83%A8%E7%BD%B2-Mac-M1/"/>
    <url>/2023/07/23/Nacos-%E6%9C%AC%E5%9C%B0%E5%8D%95%E6%9C%BA%E7%89%88%E9%83%A8%E7%BD%B2-Mac-M1/</url>
    
    <content type="html"><![CDATA[<p>一.下载Nacos-server包，最新包2.2.3<br>可以在 github 上 Nacos Release 版本列表中下载最新的稳定版本。地址：<br><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a><br>请务必下载最新版，2.1.1以下版本会报错：</p><pre><code class="hljs">    WARN Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;serviceOperatorV2Impl&#39; defined in URL ...</code></pre><p>二.启动之前配置<br>1.解压nacos-server-2.1.0.zip文件</p><p>2.nacos链接数据库<br>创建数据库：CREATE DATABASE nacos<br>执行nacos中数据库文件：mysql-schema.sql</p><p>3.配置application.properties文件<br>打开这些配置，然后正确配置链接数据库</p><pre><code class="hljs">    #*************** Config Module Related Configurations ***************#    ### If use MySQL as datasource:    ### Deprecated configuration property, it is recommended to use `spring.sql.init.platform` replaced.    spring.datasource.platform=mysql    spring.sql.init.platform=mysql    ### Count of DB:    db.num=1    ### Connect URL of DB:    db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC    db.user.0=nacos    db.password.0=nacos</code></pre><p>三.启动nacos服务</p><pre><code class="hljs">    cd nacos/bin    sh startup.sh -m standalone #standalone 代表着单机模式运行，非集群模式</code></pre><p>那如何看 Nacos 日志，从上面可见日志输出在 nacos&#x2F;logs 目录，查看 start.out 日志文件</p><p>访问：<a href="http://localhost:8848/nacos/index.html">http://localhost:8848/nacos/index.html</a>…<br>用户名：nacos<br>密码：nacos</p><p>关闭命令：</p><pre><code class="hljs">    sh shutdown.sh</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac OS M1 环境 项目因netty.dns启动失败</title>
    <link href="/2023/07/21/Mac-OS-M1-%E7%8E%AF%E5%A2%83-%E9%A1%B9%E7%9B%AE%E5%9B%A0netty-dns%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
    <url>/2023/07/21/Mac-OS-M1-%E7%8E%AF%E5%A2%83-%E9%A1%B9%E7%9B%AE%E5%9B%A0netty-dns%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<p>Mac OS M1 环境 项目因netty.dns启动失败</p><pre><code class="hljs">    ERROR 2312 --- [ctor-http-nio-2] i.n.r.d.DnsServerAddressStreamProviders  : Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS.</code></pre><p>解决方案为<br>引入依赖</p><pre><code class="hljs">    &lt;dependency&gt;            &lt;groupId&gt;io.netty&lt;/groupId&gt;            &lt;artifactId&gt;netty-resolver-dns-native-macos&lt;/artifactId&gt;            &lt;version&gt;XXX&lt;/version&gt;            &lt;classifier&gt;osx-x86_64&lt;/classifier&gt;    &lt;/dependency&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea插件推荐Generate All Getter And Setter</title>
    <link href="/2023/07/11/idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90Generate-All-Getter-And-Setter/"/>
    <url>/2023/07/11/idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90Generate-All-Getter-And-Setter/</url>
    
    <content type="html"><![CDATA[<p>使用类似 .var 的后缀模板生成 POJO 的所有 getter 和 setter 方法。<br><a href="https://plugins.jetbrains.com/plugin/18969-generate-all-getter-and-setter">https://plugins.jetbrains.com/plugin/18969-generate-all-getter-and-setter</a></p><ul><li><p>Usage<br>使用 .allget 生成所有 getter 方法。</p></li><li><p>allget<br>使用 .allset 生成所有不带默认值的 setter 方法。</p></li><li><p>allset<br>使用 .allsetv 生成所有带默认值的 setter 方法。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么需要序列化（Serializable）</title>
    <link href="/2023/07/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88Serializable%EF%BC%89/"/>
    <url>/2023/07/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88Serializable%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>最近在学习springmvc+mybatis项目时，发现老师在实体类中引用了serializable这个接口</p><h4 id="百度上是这么讲的"><a href="#百度上是这么讲的" class="headerlink" title="百度上是这么讲的"></a>百度上是这么讲的</h4><p>Serializable接口是启用其序列化功能的接口。实现java.io.Serializable 接口的类是可序列化的。没有实现此接口的类将不能使它们的任意状态被序列化或逆序列化。</p><p>这个介绍非常的不接地气，于是我又去看了几篇博客，有一个小姐姐的博客引起了我的注意，她是这样理解的：<br>序列化的过程，就是一个“freeze”的过程，它将一个对象freeze（冷冻）住，然后进行存储，等到再次需要的时候，再将这个对象de-freeze就可以立即使用。<br>我们以为的没有进行序列化，其实是在声明的各个不同变量的时候，由具体的数据类型帮助我们实现了序列化操作。<br>如果有人打开过Serializable接口的源码，就会发现，这个接口其实是个空接口，那么这个序列化操作，到底是由谁去实现了呢？其实，看一下接口的注释说明就知道，当我们让实体类实现Serializable接口时，其实是在告诉JVM此类可被序列化，可被默认的序列化机制序列化。</p><h2 id="为什么需要序列化"><a href="#为什么需要序列化" class="headerlink" title="为什么需要序列化"></a>为什么需要序列化</h2><ul><li>1，存储对象在存储介质中，以便在下次使用的时候，可以很快捷的重建一个副本。也就是When the resulting series of bits is reread according to the serialization format, it can be used to create a semantically identical clone of the original object.<br>问题：我没有实现序列化的时候，我一样可以存入到我的sqlserver或者MySQL、Oracle数据库中啊，为什么一定要序列化才能存储呢？？？？</li><li>2，便于数据传输，尤其是在远程调用的时候！<br>其实说了这么多，想表达的意思就是：Serializable接口是一个里面什么都没有的接口<br>它的源代码是public interface Serializable{}，即什么都没有。</li></ul><p>如果一个接口里面什么内容都没有，那么这个接口是一个标识接口，比如，一个学生遇到一个问题，排错排了几天也没解决，此时，她举手了（示意我去帮他解决），然后我过去，帮他解决了，那么这个举手其实就是一个标识，自己不能解决的问题标示我去帮他解决，在Java中的这个Serializable接口是给JVM看的，告诉JVM，我不做这个类的序列化了，你(JVM)给我序列化，序列化就是变成二进制流，比如云计算、Hadoop，特别是Hadoop完全就是分布式环境，那么就要涉及到对象要在网络中传输，里面的全是二进制流，当然你来做这个序列化操作也可以，但是这个类里面可能还有一个类，如果你把外面的类对象Person变成二进制，那么里面也要序列化（这要用到深度遍历，很麻烦），干脆告诉JVM，让他来帮你做。<br>serializable接口就是Java提供用来进行高效率的异地共享实例对象的机制，实现这个接口即可。</p><p>转载<a href="https://www.cnblogs.com/wangenxian/p/11003221.html">https://www.cnblogs.com/wangenxian/p/11003221.html</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/27/hello-world/"/>
    <url>/2023/06/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="生成提交"><a href="#生成提交" class="headerlink" title="生成提交"></a>生成提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate --deploy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
