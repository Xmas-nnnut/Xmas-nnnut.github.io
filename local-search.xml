<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OpenAPI 自动生成接口请求代码</title>
    <link href="/2023/08/04/OpenAPI-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/08/04/OpenAPI-%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>OpenAPI Typescript Codegen<br>Node.js库，该库基于OpenAPI规范生成Typescript客户端。<br><a href="https://github.com/ferdikoomen/openapi-typescript-codegen">https://github.com/ferdikoomen/openapi-typescript-codegen</a><br>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install openapi-typescript-codegen --save-dev<br></code></pre></td></tr></table></figure><p>例如通过请求工具类 Axios：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openapi --input (这里是你的后端接口文档地址) --output ./generated --client axios<br></code></pre></td></tr></table></figure><p>详细用法建议去查看readme</p><p>如果想要自定义请求参数，怎么办？<br>1）使用代码生成器提供的全局参数修改对象：<br>在&#x2F;generated&#x2F;core&#x2F;OpenAPI.ts 可以修改请求地址</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">export const OpenAPI: OpenAPIConfig = &#123;<br>    BASE: &#x27;http://localhost:8101&#x27;,<br>    VERSION: &#x27;1.0&#x27;,<br>    WITH_CREDENTIALS: false,<br>    CREDENTIALS: &#x27;include&#x27;,<br>    TOKEN: undefined,<br>    USERNAME: undefined,<br>    PASSWORD: undefined,<br>    HEADERS: undefined,<br>    ENCODE_PATH: undefined,<br>&#125;;<br></code></pre></td></tr></table></figure><p>2）直接定义 axios 请求库的全局参数，比如全局请求响应拦截器<br>文档：<a href="https://axios-http.com/docs/interceptors">https://axios-http.com/docs/interceptors</a><br>示例代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs text">// Add a request interceptor<br>import axios from &quot;axios&quot;;<br>axios.interceptors.request.use(<br>  function (config) &#123;<br>    // Do something before request is sent<br>    return config;<br>  &#125;,<br>  function (error) &#123;<br>    // Do something with request error<br>    return Promise.reject(error);<br>  &#125;<br>);<br>// Add a response interceptor<br>axios.interceptors.response.use(<br>  function (response) &#123;<br>    console.log(&quot;响应&quot;, response);<br>    // Any status code that lie within the range of 2xx cause this function to trigger<br>    // Do something with response data<br>    return response;<br>  &#125;,<br>  function (error) &#123;<br>    // Any status codes that falls outside the range of 2xx cause this function to trigger<br>    // Do something with response error<br>    return Promise.reject(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>我放在了&#x2F;src&#x2F;plugins&#x2F;axios中<br>接着在main.ts中引入一下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">import &quot;@/plugins/axios&quot;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx配置文件踩坑</title>
    <link href="/2023/07/31/Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2023/07/31/Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="前端项目部署配置-Nginx"><a href="#前端项目部署配置-Nginx" class="headerlink" title="前端项目部署配置 Nginx"></a>前端项目部署配置 Nginx</h3><ol><li>首先修改 baseURL</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> requests = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-comment">//基础路径,发请求URL携带api</span><br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;/api&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>下面是 Nginx 常见的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 编辑配置文件<br>cd /usr/local/nginx/conf<br>vim nginx.conf<br>// 重启Nginx<br>cd /usr/local/nginx/sbin<br>./nginx -s reload<br>// 启动Nginx<br>cd /usr/local/nginx/sbin<br>./nginx<br></code></pre></td></tr></table></figure><ol start="2"><li>将以下内容拷贝进配置文件，注意看以下注释信息进行理解：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>    listen 8081; # 前端项目的端口<br>    server_name localhost; # 服务器地址或绑定域名<br><br>    location / &#123;<br>        root /usr/share/nginx/html/dist; # dist包存放的路径<br>        index index.html index.htm;<br>    &#125;<br><br>    location /api/ &#123;<br>        proxy_pass http://ip:port/;<br>        # 当访问路径包含/api时，进行代理跳转。<br>        # 举个栗子：访问的是 http://ip:port/api/user/login<br>        # 则会被代理为 http://ip:port/user/login<br>    &#125;<br>    # 再举个栗子<br>    location /api/ &#123;<br>        proxy_pass http://ip:port;<br>        # 注意：比上面的少一个 &#x27;/&#x27;<br>        # 访问的是 http://ip:port/api/user/login<br>    &#125;<br>    # 再举个栗子<br>    location /api/ &#123;<br>        proxy_pass http://ip:port/test/;<br>        # 访问的是 http://ip:port/test/user/login<br>        # 如果最后少了 &#x27;/&#x27; ，就会代理到 http://ip:port/testuser/login<br>    &#125;<br>    error_page 500 502 503 504 /50x.html;<br>    location = /50x.html &#123;<br>        root html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：在 nginx 中配置 proxy_pass 时，如果在 proxy_pass 后面的 url 加 ‘&#x2F;‘ ，相当于是绝对根路径，则 nginx 不会把 location 中匹配的路径部分代理走;如果没有 ‘&#x2F;‘ ，则会把匹配的路径部分给代理走。<br>参考文章：<a href="https://blog.csdn.net/wyl9527/article/details/89671506">https://blog.csdn.net/wyl9527/article/details/89671506</a></p><h2 id="location-URI-结尾带不带-x2F"><a href="#location-URI-结尾带不带-x2F" class="headerlink" title="location URI 结尾带不带 &#x2F;"></a>location URI 结尾带不带 &#x2F;</h2><p>参考文章：<a href="https://juejin.cn/post/7044438248495513614">https://juejin.cn/post/7044438248495513614</a></p><p>关于 URI 尾部的  &#x2F;  有三点也需要说明一下。第一点与 location 配置有关，其他两点无关。</p><p>location 中的字符有没有  &#x2F;  都没有影响。也就是说  &#x2F;homepage&#x2F;  和  &#x2F;homepage  是一样的。<br>如果 URI 结构是  <a href="https://domain.com/">https://domain.com/</a>  的形式，尾部有没有  &#x2F;  都不会造成重定向。因为浏览器在发起请求的时候，默认加上了  &#x2F; 。虽然很多浏览器在地址栏里也不会显示  &#x2F; 。<br>如果 URI 的结构是  <a href="https://domain.com/homepage/">https://domain.com/homepage/</a> 。尾部如果缺少  &#x2F;  将导致重定向。因为根据约定，URL 尾部的  &#x2F;  表示目录，没有  &#x2F;  表示文件。所以访问  &#x2F;homepage&#x2F;  时，服务器会自动去该目录下找对应的默认文件。如果访问  &#x2F;homepage  的话，服务器会先去找  homepage  文件，找不到的话会将  homepage  当成目录，重定向到  &#x2F;homepage&#x2F; ，去该目录下找默认文件。</p><h2 id="补充：location-指令说明"><a href="#补充：location-指令说明" class="headerlink" title="补充：location 指令说明"></a>补充：location 指令说明</h2><p>参考文章：<a href="https://developer.aliyun.com/article/898207">https://developer.aliyun.com/article/898207</a></p><p>我们看下 Location 的具体语法：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">[ = | ~ | ~* | ^~ ] uri</span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>重点看方括号中的 [ &#x3D; | ~ | <del>* | ^</del> ]，其中 | 分隔的内容表示你可能会用到的语法，其中：</p><ul><li>&#x3D; 表示精确匹配，比如：</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">location</span> <span class="hljs-operator">=</span> /test &#123;<br>    return <span class="hljs-number">200</span> <span class="hljs-string">&quot;hello&quot;</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>&#x2F;test ok</p></li><li><p>&#x2F;test&#x2F; not ok</p></li><li><p>&#x2F;test2 not ok</p></li><li><p>&#x2F;test&#x2F;2 not ok</p></li></ul></blockquote><ul><li>~ 表示区分大小写的正则匹配，比如：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">~ ^/test</span>\$ &#123;<br>[ configuration ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>&#x2F;test ok</p></li><li><p>&#x2F;Test not ok</p></li><li><p>&#x2F;test&#x2F; not ok</p></li><li><p>&#x2F;test2 not ok</p></li></ul></blockquote><ul><li>~_ 表示不区分大小写的正则匹配<br>location ~_ ^&#x2F;test$ {<br> [ configuration ]<br>}</li></ul><blockquote><ul><li><p>&#x2F;test ok</p></li><li><p>&#x2F;Test ok</p></li><li><p>&#x2F;test&#x2F; not ok</p></li><li><p>&#x2F;test2 not ok</p></li></ul></blockquote><ul><li>^~ 表示 uri 以某个字符串开头<br>location ^~ &#x2F;images&#x2F; {<br> [ configuration ]<br>}</li></ul><blockquote><ul><li>&#x2F;images&#x2F;1.gif ok</li></ul></blockquote><p>而当你不使用这些语法的时候，只写 uri 的时候：<br>&#x2F; 表示通用匹配：<br>location &#x2F; {<br> [ configuration ]<br>}</p><blockquote><ul><li>&#x2F;index.html ok</li></ul></blockquote><p>location &#x2F;test {<br>[ configuration ]<br>}</p><blockquote><ul><li><p>&#x2F;test ok</p></li><li><p>&#x2F;test2 ok</p></li><li><p>&#x2F;test&#x2F; ok</p></li></ul></blockquote><h3 id="location-的定义分为两种"><a href="#location-的定义分为两种" class="headerlink" title="location 的定义分为两种"></a>location 的定义分为两种</h3><ul><li>前缀字符串（prefix(前缀) string(字符串)）</li><li>正则表达式（regular expression(表达)），具体为前面带 ~* 和 ~ 修饰符的<br>而匹配 location 的顺序为：</li></ul><ol><li>检查使用前缀字符串的 locations，在使用前缀字符串的 locations 中选择最长匹配的，并将结果进行储存</li><li>如果符合带有 &#x3D; 修饰符的 URI，则立刻停止匹配</li><li>如果符合带有 ^~ 修饰符的 URI，则也立刻停止匹配。</li><li>然后按照定义文件的顺序，检查正则表达式，匹配到就停止</li><li>当正则表达式匹配不到的时候，使用之前储存的前缀字符串</li></ol><h3 id="再总结一下就是"><a href="#再总结一下就是" class="headerlink" title="再总结一下就是"></a>再总结一下就是</h3><p>在顺序上，前缀字符串顺序不重要，按照匹配长度来确定，正则表达式则按照定义顺序。<br>在优先级上，&#x3D; 修饰符最高，^~ 次之，再者是正则，最后是前缀字符串匹配。</p>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vscode开发vue+ts项目 报错：找不到模块或其相应的类型声明</title>
    <link href="/2023/07/24/Vscode%E5%BC%80%E5%8F%91ts%E9%A1%B9%E7%9B%AE-%E6%8A%A5%E9%94%99%EF%BC%9A%E6%89%BE%E4%B8%8D%E5%88%B0%E6%A8%A1%E5%9D%97%E6%88%96%E5%85%B6%E7%9B%B8%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/"/>
    <url>/2023/07/24/Vscode%E5%BC%80%E5%8F%91ts%E9%A1%B9%E7%9B%AE-%E6%8A%A5%E9%94%99%EF%BC%9A%E6%89%BE%E4%B8%8D%E5%88%B0%E6%A8%A1%E5%9D%97%E6%88%96%E5%85%B6%E7%9B%B8%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>报错：找不到模块或其相应的类型声明。（Vue 3 can not find module）</p><p>报错原因：typescript 只能理解 .ts 文件，无法理解 .vue文件</p><p>解决方法：在项目根目录下创建一个后缀为 vue.d.ts 的文件，并写入以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">// 以下两种方案二选一<br>// 方案一 <br>declare module &quot;*.vue&quot; &#123; import Vue from &quot;vue&quot;; export default Vue; &#125; <br>// 方案二 <br>declare module &#x27;*.vue&#x27; &#123; import &#123; defineComponent &#125; from &#x27;vue&#x27;; const Component: ReturnType&lt;typeof defineComponent&gt;; export default Component &#125;<br></code></pre></td></tr></table></figure><p>然后在tsconfig.json中写入一下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.d.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.vue&quot;, &quot;vue.d.ts&quot;],<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>vue</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos 本地单机版部署(Mac M1)</title>
    <link href="/2023/07/23/Nacos-%E6%9C%AC%E5%9C%B0%E5%8D%95%E6%9C%BA%E7%89%88%E9%83%A8%E7%BD%B2-Mac-M1/"/>
    <url>/2023/07/23/Nacos-%E6%9C%AC%E5%9C%B0%E5%8D%95%E6%9C%BA%E7%89%88%E9%83%A8%E7%BD%B2-Mac-M1/</url>
    
    <content type="html"><![CDATA[<p>一.下载Nacos-server包，最新包2.2.3<br>可以在 github 上 Nacos Release 版本列表中下载最新的稳定版本。地址：<br><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a><br>请务必下载最新版，2.1.1以下版本会报错：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">WARN Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;serviceOperatorV2Impl&#x27; defined in URL ...<br></code></pre></td></tr></table></figure><p>二.启动之前配置<br>1.解压nacos-server-2.1.0.zip文件</p><p>2.nacos链接数据库<br>创建数据库：CREATE DATABASE nacos<br>执行nacos中数据库文件：mysql-schema.sql</p><p>3.配置application.properties文件<br>打开这些配置，然后正确配置链接数据库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">#*************** Config Module Related Configurations ***************#<br>### If use MySQL as datasource:<br>### Deprecated configuration property, it is recommended to use `spring.sql.init.platform` replaced.<br>spring.datasource.platform=mysql<br>spring.sql.init.platform=mysql<br><br>### Count of DB:<br>db.num=1<br><br>### Connect URL of DB:<br>db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC<br>db.user.0=nacos<br>db.password.0=nacos<br></code></pre></td></tr></table></figure><p>三.启动nacos服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> nacos/bin<br>sh startup.sh -m standalone <span class="hljs-comment">#standalone 代表着单机模式运行，非集群模式</span><br></code></pre></td></tr></table></figure><p>那如何看 Nacos 日志，从上面可见日志输出在 nacos&#x2F;logs 目录，查看 start.out 日志文件</p><p>访问：<a href="http://localhost:8848/nacos/index.html">http://localhost:8848/nacos/index.html</a>…<br>用户名：nacos<br>密码：nacos</p><p>关闭命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh shutdown.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>Java</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac OS M1 环境 项目因netty.dns启动失败</title>
    <link href="/2023/07/21/Mac-OS-M1-%E7%8E%AF%E5%A2%83-%E9%A1%B9%E7%9B%AE%E5%9B%A0netty-dns%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
    <url>/2023/07/21/Mac-OS-M1-%E7%8E%AF%E5%A2%83-%E9%A1%B9%E7%9B%AE%E5%9B%A0netty-dns%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<p>Mac OS M1 环境 项目因netty.dns启动失败</p><pre><code class="hljs">    ERROR 2312 --- [ctor-http-nio-2] i.n.r.d.DnsServerAddressStreamProviders  : Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS.</code></pre><p>解决方案为<br>引入依赖</p><pre><code class="hljs">    &lt;dependency&gt;            &lt;groupId&gt;io.netty&lt;/groupId&gt;            &lt;artifactId&gt;netty-resolver-dns-native-macos&lt;/artifactId&gt;            &lt;version&gt;XXX&lt;/version&gt;            &lt;classifier&gt;osx-x86_64&lt;/classifier&gt;    &lt;/dependency&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lombok Builder 注解</title>
    <link href="/2023/07/12/Lombok-Builder-%E6%B3%A8%E8%A7%A3/"/>
    <url>/2023/07/12/Lombok-Builder-%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>以前使用 new 对象后，再逐行执行 set 方法的方式来给对象赋值的。<br>还有另外一种可能更方便的方式 builder。<br>1）实体类加上 @Builder 等注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecuteCodeRequest</span> &#123;<br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> String language;<br></code></pre></td></tr></table></figure><p>2）可以使用链式的方式更方便地给对象赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">ExecuteCodeRequest</span> <span class="hljs-variable">executeCodeRequest</span> <span class="hljs-operator">=</span> ExecuteCodeRequest.builder()<br>    .code(code)<br>    .language(language)<br>    .inputList(inputList)<br>    .build();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea插件推荐Generate All Getter And Setter</title>
    <link href="/2023/07/11/idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90Generate-All-Getter-And-Setter/"/>
    <url>/2023/07/11/idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90Generate-All-Getter-And-Setter/</url>
    
    <content type="html"><![CDATA[<p>使用类似 .var 的后缀模板生成 POJO 的所有 getter 和 setter 方法。<br><a href="https://plugins.jetbrains.com/plugin/18969-generate-all-getter-and-setter">https://plugins.jetbrains.com/plugin/18969-generate-all-getter-and-setter</a></p><ul><li><p>Usage<br>使用 .allget 生成所有 getter 方法。</p></li><li><p>allget<br>使用 .allset 生成所有不带默认值的 setter 方法。</p></li><li><p>allset<br>使用 .allsetv 生成所有带默认值的 setter 方法。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(转载)使用Gson进行json数据转换list to json 和json to list</title>
    <link href="/2023/07/11/%E4%BD%BF%E7%94%A8Gson%E8%BF%9B%E8%A1%8Cjson%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2list-to-json-%E5%92%8Cjson-to-list/"/>
    <url>/2023/07/11/%E4%BD%BF%E7%94%A8Gson%E8%BF%9B%E8%A1%8Cjson%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2list-to-json-%E5%92%8Cjson-to-list/</url>
    
    <content type="html"><![CDATA[<p>经过比较，gson和其他现有java json类库最大的不同时gson需要序列化得实体类不需要使用annotation来标识需要序列化得字段，<br>同时gson又可以通过使用annotation来灵活配置需要序列化的字段。<br>下面是一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;  <br>  <br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the name </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name the name to set </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the age </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> age;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age the age to set </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.age = age;  <br>    &#125;  <br>      <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>  <br>    &#123;  <br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;:&quot;</span> +age;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>实体很简单，两个字段，当然实体中的字段也可以是List或者Set类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();  <br>List&lt;Person&gt; persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Person&gt;();  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  <br>     <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();  <br>     p.setName(<span class="hljs-string">&quot;name&quot;</span> + i);  <br>     p.setAge(i * <span class="hljs-number">5</span>);  <br>     persons.add(p);  <br>&#125;  <br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> gson.toJson(persons);  <br></code></pre></td></tr></table></figure><p>上面的代码重点是Gson对象，它提供了toJason()方法将对象转换成Json字符串，上面代码的str对象值为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name0&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">15</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name5&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">25</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name6&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">30</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name7&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">35</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name8&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">40</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;name9&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">45</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span> <br></code></pre></td></tr></table></figure><p>很标准的json数据，很简单吧，呵呵。<br>下面来看看gson的反序列化，Gson提供了fromJson()方法来实现从Json相关对象到java实体的方法。<br>在日常应用中，我们一般都会碰到两种情况，转成单一实体对象和转换成对象列表或者其他结构。<br>先来看第一种：<br>比如json字符串为：[{“name”:”name0”,”age”:0}]<br>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> gson.fromJson(str, Person.class);  <br></code></pre></td></tr></table></figure><p>提供两个参数，分别是json字符串以及需要转换对象的类型。<br>第二种，转换成列表类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">List&lt;Person&gt; ps = gson.fromJson(str, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeToken</span>&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType());  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ps.size() ; i++)  <br>&#123;  <br>     <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> ps.get(i);  <br>     System.out.println(p.toString());  <br>&#125;  <br></code></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/god2030/article/details/51140450">https://blog.csdn.net/god2030/article/details/51140450</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么需要序列化（Serializable）</title>
    <link href="/2023/07/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88Serializable%EF%BC%89/"/>
    <url>/2023/07/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88Serializable%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>最近在学习springmvc+mybatis项目时，发现老师在实体类中引用了serializable这个接口</p><h4 id="百度上是这么讲的"><a href="#百度上是这么讲的" class="headerlink" title="百度上是这么讲的"></a>百度上是这么讲的</h4><p>Serializable接口是启用其序列化功能的接口。实现java.io.Serializable 接口的类是可序列化的。没有实现此接口的类将不能使它们的任意状态被序列化或逆序列化。</p><p>这个介绍非常的不接地气，于是我又去看了几篇博客，有一个小姐姐的博客引起了我的注意，她是这样理解的：<br>序列化的过程，就是一个“freeze”的过程，它将一个对象freeze（冷冻）住，然后进行存储，等到再次需要的时候，再将这个对象de-freeze就可以立即使用。<br>我们以为的没有进行序列化，其实是在声明的各个不同变量的时候，由具体的数据类型帮助我们实现了序列化操作。<br>如果有人打开过Serializable接口的源码，就会发现，这个接口其实是个空接口，那么这个序列化操作，到底是由谁去实现了呢？其实，看一下接口的注释说明就知道，当我们让实体类实现Serializable接口时，其实是在告诉JVM此类可被序列化，可被默认的序列化机制序列化。</p><h2 id="为什么需要序列化"><a href="#为什么需要序列化" class="headerlink" title="为什么需要序列化"></a>为什么需要序列化</h2><ul><li>1，存储对象在存储介质中，以便在下次使用的时候，可以很快捷的重建一个副本。也就是When the resulting series of bits is reread according to the serialization format, it can be used to create a semantically identical clone of the original object.<br>问题：我没有实现序列化的时候，我一样可以存入到我的sqlserver或者MySQL、Oracle数据库中啊，为什么一定要序列化才能存储呢？？？？</li><li>2，便于数据传输，尤其是在远程调用的时候！<br>其实说了这么多，想表达的意思就是：Serializable接口是一个里面什么都没有的接口<br>它的源代码是public interface Serializable{}，即什么都没有。</li></ul><p>如果一个接口里面什么内容都没有，那么这个接口是一个标识接口，比如，一个学生遇到一个问题，排错排了几天也没解决，此时，她举手了（示意我去帮他解决），然后我过去，帮他解决了，那么这个举手其实就是一个标识，自己不能解决的问题标示我去帮他解决，在Java中的这个Serializable接口是给JVM看的，告诉JVM，我不做这个类的序列化了，你(JVM)给我序列化，序列化就是变成二进制流，比如云计算、Hadoop，特别是Hadoop完全就是分布式环境，那么就要涉及到对象要在网络中传输，里面的全是二进制流，当然你来做这个序列化操作也可以，但是这个类里面可能还有一个类，如果你把外面的类对象Person变成二进制，那么里面也要序列化（这要用到深度遍历，很麻烦），干脆告诉JVM，让他来帮你做。<br>serializable接口就是Java提供用来进行高效率的异地共享实例对象的机制，实现这个接口即可。</p><p>转载<a href="https://www.cnblogs.com/wangenxian/p/11003221.html">https://www.cnblogs.com/wangenxian/p/11003221.html</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac OS M1 JDK8环境下启动慢</title>
    <link href="/2023/06/28/Mac-OS-M1-JDK8%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%90%AF%E5%8A%A8%E6%85%A2/"/>
    <url>/2023/06/28/Mac-OS-M1-JDK8%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%90%AF%E5%8A%A8%E6%85%A2/</url>
    
    <content type="html"><![CDATA[<p>同样的网络环境，同一个SpringBoot项目<br>在win10下启动，需要10秒左右<br>在macOS下启动，竟然需要23多秒<br>换成JDK17后也快了不少，JDK8也是下载ARM版本的</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>修改&#x2F;etc&#x2F;hosts文件</li></ul><p>打开终端输入hostname，查看你的mac的主机名称（xxxMacBook.local）<br>没修改前应该是这个样子</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">##<br># Host Database<br>#<br># localhost is used to configure the loopback interface<br># when the system is booting.  Do not change this entry.<br>##<br>127.0.0.1localhost<br>255.255.255.255broadcasthost<br>::1localhost<br></code></pre></td></tr></table></figure><p>把它改成这个样子</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">##<br># Host Database<br>#<br># localhost is used to configure the loopback interface<br># when the system is booting.  Do not change this entry.<br>##<br>127.0.0.1localhost xxxMacBook.local<br>255.255.255.255broadcasthost<br>::1localhost xxxMacBook.local <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>Java</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码加密开发流程</title>
    <link href="/2023/06/25/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/06/25/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>添加 Spring Boot 权限认证依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.2</span><span class="hljs-number">.1</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="2-添加过滤器"><a href="#2-添加过滤器" class="headerlink" title="2.添加过滤器"></a>2.添加过滤器</h2><p>在 config 包下新建 SecurityConfig 类<br>将以下代码添加到类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>            .antMatchers(<span class="hljs-string">&quot;/**&quot;</span>)<br>            .permitAll()<br>            .anyRequest()<br>            .authenticated()<br>            .and()<br>            .csrf()<br>            .disable();<br>        &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> BCryptPasswordEncoder <span class="hljs-title function_">bCryptPasswordEncoder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-在注册接口中加上密码加密"><a href="#3-在注册接口中加上密码加密" class="headerlink" title="3.在注册接口中加上密码加密"></a>3.在注册接口中加上密码加密</h2><p>修改 UserController 中的代码，首先注入加密实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br>BCryptPasswordEncoder bCryptPasswordEncoder;<br></code></pre></td></tr></table></figure><p>然后在注册接口下增加密码进行加密代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">encodePassword</span> <span class="hljs-operator">=</span> bCryptPasswordEncoder.encode(user.getUpassword());<br>user.setUpassword(encodePassword);<br></code></pre></td></tr></table></figure><h2 id="4-在登录时进行密码匹配"><a href="#4-在登录时进行密码匹配" class="headerlink" title="4.在登录时进行密码匹配"></a>4.在登录时进行密码匹配</h2><p>在登录接口下增加匹配代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">User</span> <span class="hljs-variable">userfromJdbc</span> <span class="hljs-operator">=</span> userService.loginService(user.getUname());<br><span class="hljs-comment">//匹配代码</span><br><span class="hljs-keyword">if</span>(!bCryptPasswordEncoder.matches(user.getUpassword(),userfromJdbc.getUpassword()))&#123;<br>    <span class="hljs-keyword">return</span> Result.failure(ResultCodeEnum.UNAUTHORIZED,<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span>JWTUtils.getToken(userfromJdbc.getUaccount(),userfromJdbc.getUname());<br>    Map&lt;String,String&gt; userMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    userMap.put(<span class="hljs-string">&quot;userId&quot;</span>,userfromJdbc.getUaccount());<br>    userMap.put(<span class="hljs-string">&quot;userName&quot;</span>,userfromJdbc.getUname());<br>    userMap.put(<span class="hljs-string">&quot;token&quot;</span>,token);<br>    <span class="hljs-keyword">return</span> Result.success(userMap);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>加密</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
